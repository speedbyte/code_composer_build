TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    1

       1                    ; file: intvect.asm, automatically generated by GENTMS470.EXE, Version: 3.10
       2                    ; from: C:\PROJECT_PARROT_SOFTWARE\SYS_PLATTFORM_WORKBENCH\UHV_B1_V002\MOD\MOD_OSEK_DYN\CFG\UHV_NAR.oi
       3                    ; at  : Mon Sep 22 12:03:54 2008
       4                    ; License 2400100185 for S1nn GmbH u. Co. KG, Infotainment and Connectivity
       5                    ; Implementation: TMS470R1
       6                    ; Version of general code: 3.54b
       7                    
       8                    
       9          00000003  osdVrmAsmGenMajRelNum     .set 3
      10          0000000A  osdVrmAsmGenMinRelNum     .set 10
      11                    
      12 00000000              .state32
      13                    
      14                       .include "tcb.inc"
      15                       
      16                       ; added for second jump table placed on memory space 0x6000
      17                        .global  _osIRQHandler           
      18                       
      19                       .ref _osUnhandledExceptionWrapper
      20                       .ref _osDirectSWIDispatcher
      21                     .if (!$$defined(osdSuppressDefVectWarning))
      22                       .ref _osDefVectWarning
      23                     .endif
      24                    
      25                    
      26                       .ref _osSystemStack
      27                     .if (osdStackCheck == 1)
      28                       .ref _osSystemStackOverflow
      29 00000000 00000000! osRef_osSystemStackOverflow .word _osSystemStackOverflow
      30                     .endif
      31                    
      32                     .if ((osdNonPreempt == 0))
      33                       .ref _osLockDispatcher
      34 00000004 00000000! osRef_osLockDispatcher .word _osLockDispatcher
      35                     .endif
      36                    
      37                       .ref _osIntNestingDepth
      38 00000008 00000000! osRef_osIntNestingDepth .word _osIntNestingDepth
      39                       .ref _osSystemStack
      40 0000000c 000000C8! osRef_SystemStackTop .word _osSystemStack + osdSystemStackSize
      41 00000010 00000000! osRef_SystemStack .word _osSystemStack
      42                     .if (!osdNonPreempt)
      43                       .ref _osStartDispatcher
      44 00000014 00000000! osRef_osStartDispatcher .word _osStartDispatcher
      45                       .ref _osSupervisorStack
      46 00000018 000000C8! osRef_SupervisorStackTop .word _osSupervisorStack + osdSupervisorStackSize
      47                       .ref _osDispatcher
      48 0000001c 00000000! osRef_osDispatcher .word _osDispatcher
      49                     .endif
      50                    
      51                     .if (osdORTIDebug == 1)
      52                     .if (osdORTIVersion == 200)
      53                       .ref _osORTICurrentServiceId
      54                    osRef_osORTICurrentServiceId .word _osORTICurrentServiceId
      55                     .endif
TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    2

      56                    
      57                     .endif
      58                    
      59 00000020 AAAAAAAA  osRef_AAAAAAAA .word 0xAAAAAAAA; 
      60                    
      61 00000024           _osEnterCallLeaveISR
      62                       ;registers {r3,r8,r9,ip,lr} already pushed and lr points to ISR function reference
      63 00000024 E59E8000     ldr    r8,[lr]              ; must never run in FIQ mode where r8 is shadowed!
      64 00000028 E59DE010     ldr    lr,[sp,#0x10]        ; for the following code, restore situation compatible w/ old version
      65                    
      66 0000002c E14F0000     mrs    a1, SPSR
      67 00000030 E52D0004     str    a1, [sp, #-4]!
      68                    
      69                       ; lock Dispatcher
      70                     .if (!osdNonPreempt)
      71 00000034 E51F0038     ldr    a1, osRef_osLockDispatcher
      72 00000038 E5D01000     ldrb   a2,[a1]
      73 0000003c E2811001     add    a2,a2,#1
      74 00000040 E5C01000     strb   a2,[a1]
      75                     .endif
      76                    
      77                    
      78                       ; increment osIntNestingDepth
      79 00000044 E51F0044     ldr    a1, osRef_osIntNestingDepth
      80 00000048 E5D01000     ldrb   a2,[a1]
      81 0000004c E3510000     cmp    a2, #0               ; set Z if first interrupt nesting level
      82 00000050 E2811001     add    a2,a2,#1
      83 00000054 E5C01000     strb   a2,[a1]
      84                    
      85                       ; switch to system mode
      86 00000058 E10F3000     mrs    a4, CPSR
      87 0000005c E383301F     orr    a4, a4, #0x1F
      88 00000060 E129F003     msr    CPSR, a4
      89                    
      90 00000064 1A000002     bne    _EnterISR_nested
      91                       ; on first interrupt level: load SYSTEM SP with system stack and save sp
      92 00000068 E1A0000D     mov    a1, sp
      93 0000006c E51FD068     ldr    sp, osRef_SystemStackTop
      94 00000070 E52D0004     str    a1, [sp, #-4]!         ; save sp
      95 00000074           _EnterISR_nested
      96                    
      97 00000074 E52DE004     str    lr, [sp, #-4]!         ; save LR
      98                       
      99                    
     100                     .if (osdORTIDebug == 1)
     101                     .if (osdORTIVersion == 200)
     102                       ldr    a1,osRef_osORTICurrentServiceId
     103                       ldrb   a3, [a1]
     104                       str    a3, [sp, #-4]!
     105                       mov    a3,#osdORTINoService
     106                       strb   a3, [a1]
     107                     .endif
     108                    
     109                     .endif
     110                    
TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    3

     111                    
     112                       ; !!! a2 must still contain value of osIntNestingDepth !!!
     113                    
     114 00000078           _CallISR
     115 00000078 E1A0E00F     mov   lr,pc
     116 0000007c E12FFF18     bx    r8
     117                    
     118                    _LeaveISR
     119                     .if (osdStackCheck == 1)
     120 00000080 E51F0078     ldr    a1, osRef_SystemStack
     121 00000084 E5901000     ldr    a2,[a1]
     122 00000088 E51F2070     ldr    a3, osRef_AAAAAAAA;
     123 0000008c E1510002     cmp    a2, a3
     124 00000090 1BFFFFDA!    blne   _osSystemStackOverflow
     125                     .endif
     126                    
     127                    
     128 00000094 E10F3000     mrs    a4, CPSR
     129 00000098 E3833080     orr    a4, a4, #0x80        ; disable interrupt
     130 0000009c E129F003     msr    CPSR, a4
     131                       
     132                    
     133                     .if (osdORTIDebug == 1)
     134                     .if (osdORTIVersion == 200)
     135                       ldr    a1, [sp], #+4
     136                       ldr    a2, osRef_osORTICurrentServiceId
     137                       strb   a1, [a2]
     138                     .endif
     139                    
     140                     .endif
     141                    
     142                    
     143                       ; decrement osIntNestingDepth
     144 000000a0 E51F00A0     ldr    a1, osRef_osIntNestingDepth
     145 000000a4 E5D01000     ldrb   a2,[a1]
     146 000000a8 E2511001     subs   a2,a2,#1             ; set Z if first interrupt nesting level
     147 000000ac E5C01000     strb   a2,[a1]
     148                    
     149 000000b0 E49DE004     ldr    lr, [sp], #+4
     150                    
     151                       ; restore sp (only for first nesting level)
     152 000000b4 059DD000     ldreq  sp, [sp]
     153                    
     154                       ; switch to irq mode
     155 000000b8 E3C3301F     bic    a4, a4, #0x1F
     156 000000bc E3833092     orr    a4, a4, #0x92
     157 000000c0 E129F003     msr    CPSR, a4
     158                    
     159                       ; decrement osLockDispatcher
     160                     .if (!osdNonPreempt)
     161 000000c4 E51F00C8     ldr    r0, osRef_osLockDispatcher
     162 000000c8 E5D01000     ldrb   r1,[r0]
     163 000000cc E2511001     subs   r1,r1,#1
     164 000000d0 E5C01000     strb   r1,[r0]
     165                     .endif
TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    4

     166                    
     167                    
     168                     .if (!osdNonPreempt)
     169                       ; return from IRQ if dispatcher locked
     170 000000d4 1A000013     bne    _LeaveISR_normal
     171 000000d8 E51F00CC     ldr    r0, osRef_osStartDispatcher
     172 000000dc E5D01000     ldrb   r1,[r0]
     173 000000e0 E3310000     teq    r1,#0
     174                       ; return from IRQ if dispatcher not started
     175 000000e4 0A00000F     beq    _LeaveISR_normal
     176                    
     177                       ; jump to dispatcher
     178                       ; copy r0-r2,lr to supervisor stack
     179 000000e8 E1A0C00D     mov    ip, sp
     180 000000ec E28CC014     add    ip, ip, #20
     181 000000f0 E51F90E0     ldr    r9,osRef_SupervisorStackTop
     182 000000f4 E89C0107     ldmfd  ip,{r0-r2,r8}
     183 000000f8 E9090107     stmfd  r9,{r0-r2,r8}
     184                    
     185 000000fc E49D0004     ldr    r0, [sp], #+4        ; r0 = SPSRirq
     186                    
     187                       ; switch to SVC mode
     188 00000100 E3831093     orr    r1, r3, #0x93
     189 00000104 E8BD1308     ldmfd  sp!,{r3,r8,r9,ip}
     190 00000108 E28DD010     add    sp, sp, #16
     191 0000010c E129F001     msr    CPSR, r1
     192                    
     193 00000110 E169F000     msr    SPSR, r0
     194 00000114 E24DD010     sub    sp,sp,#16
     195 00000118 E49DE004     ldr    lr, [sp], #+4        ; restore LR
     196 0000011c E24EE004     sub    lr, lr,#4            ; convert LRirq to LRsvc
     197                    
     198 00000120 E51F010C     ldr    r0, osRef_osDispatcher
     199 00000124 E1A0F000     mov    pc,r0
     200                     .endif
     201                    
     202                    
     203 00000128           _LeaveISR_normal
     204                       ; normal return from IRQ
     205 00000128 E49D0004     ldr    r0, [sp], #+4        ; r0 = SPSRirq
     206 0000012c E169F000     msr    SPSR, r0
     207                    
     208 00000130 E8BD5308     ldmfd  sp!,{r3,r8,r9,ip,lr}
     209 00000134 E8BD0007     ldmfd  sp!,{r0-r2}
     210 00000138 E25EF004     subs   pc,lr,#4             ; ENDOF ISRcat2 handler
     211                    
     212                       .ref _osUndefInstruction
     213                     .if (osdTasksInUserMode==0)
     214                       .ref _osDirectSWIDispatcher
     215                     .else
     216                       .ref _osSWI
     217                     .endif
     218                    
     219                       .ref _osPrefetchAbort
     220                       .ref _osDataAbort
TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    5

     221                       .ref _osFIQ
     222                       .ref _Can0Interrupt
     223                       .ref _UART1_TxISR
     224                       .ref _UART1_RxISR
     225                       .ref _UART2_TxISR
     226                       .ref _UART2_RxISR
     227                       .ref _UART_ErrorISR
     228                       .ref _osTimerInt
     229                    
     230                    
     231 0000013c           _Can0Interrupt_cat23
     232 0000013c E92D5308     stmfd  sp!,{r3,r8,r9,ip,lr}
     233 00000140 EBFFFFB7     bl _osEnterCallLeaveISR
     234 00000144 00000000!    .word _Can0Interrupt
     235                    
     236                    
     237 00000148           _UART1_TxISR_cat1
     238 00000148 E8BD0007     ldmfd  sp!,{r0-r2}
     239 0000014c EAFFFFAB!    b _UART1_TxISR
     240                    
     241 00000150           _UART1_RxISR_cat1
     242 00000150 E8BD0007     ldmfd  sp!,{r0-r2}
     243 00000154 EAFFFFA9!    b _UART1_RxISR
     244                    
     245 00000158           _UART2_TxISR_cat1
     246 00000158 E8BD0007     ldmfd  sp!,{r0-r2}
     247 0000015c EAFFFFA7!    b _UART2_TxISR
     248                    
     249 00000160           _UART2_RxISR_cat1
     250 00000160 E8BD0007     ldmfd  sp!,{r0-r2}
     251 00000164 EAFFFFA5!    b _UART2_RxISR
     252                    
     253 00000168           _UART_ErrorISR_cat1
     254 00000168 E8BD0007     ldmfd  sp!,{r0-r2}
     255 0000016c EAFFFFA3!    b _UART_ErrorISR
     256                    
     257 00000170           _osTimerInt_cat23
     258 00000170 E92D5308     stmfd  sp!,{r3,r8,r9,ip,lr}
     259 00000174 EBFFFFAA     bl _osEnterCallLeaveISR
     260 00000178 00000000!    .word _osTimerInt
     261                    
     262                    
     263                    
     264                    
     265                    
     266                    _osDefVect
     267                     .if (!$$defined(osdSuppressDefVectWarning))
     268                       stmfd  sp!,{r3,r8,r9,ip,lr}
     269                       bl _osEnterCallLeaveISR
     270                       .word _osDefVectWarning
     271                    
     272                     .else
     273 0000017c E8BD0007     ldmfd  sp!,{r0-r2}
     274 00000180 E25EF004     subs   pc,lr,#4
     275                     .endif
TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    6

     276                    
     277                    
     278                    
     279                       .ref _osUnhandledExceptionWrapper
     280 00000000              .sect ".osvtable"
     281                       .global     osIRQTable
     282 00000000           osIRQTable     ; interrupt vector table
     283 00000000 0000017C'    .word _osDefVect
     284 00000004 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 0 (SPI1)
     285 00000008 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 1 (COMP2)
     286 0000000c 00000170'    .word _osTimerInt_cat23     ; ISN 2 (COMP1)
     287 00000010 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 3 (TAP)
     288 00000014 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 4 (SPI2)
     289 00000018 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 5 (GIOA)
     290 0000001c 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 6 (HWAG_H)
     291 00000020 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 7 (HET1)
     292 00000024 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 8 (EXT8)
     293 00000028 00000168'    .word _UART_ErrorISR_cat1     ; ISN 9 (SCIERR)
     294 0000002c 00000150'    .word _UART1_RxISR_cat1     ; ISN 10 (SCIRX)
     295 00000030 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 11 (C2SI)
     296 00000034 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 12 (EXT12)
     297 00000038 0000013C'    .word _Can0Interrupt_cat23     ; ISN 13 (HECCA)
     298 0000003c 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 14 (SCCA)
     299 00000040 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 15 (EXT15)
     300 00000044 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 16 (ADCEEC)
     301 00000048 00000160'    .word _UART2_RxISR_cat1     ; ISN 17 (EXT17)
     302 0000004c 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 18 (DMAA)
     303 00000050 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 19 (EXT19)
     304 00000054 00000148'    .word _UART1_TxISR_cat1     ; ISN 20 (SCITX)
     305 00000058 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 21 (SSI)
     306 0000005c 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 22 (HWAG_L)
     307 00000060 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 23 (HET2)
     308 00000064 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 24 (HECCB)
     309 00000068 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 25 (SCCB)
     310 0000006c 00000158'    .word _UART2_TxISR_cat1     ; ISN 26 (EXT26)
     311 00000070 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 27 (ADCEG1C)
     312 00000074 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 28 (DMAB)
     313 00000078 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 29 (GIOB)
     314 0000007c 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 30 (ADCEG2C)
     315 00000080 00000000!    .word _osUnhandledExceptionWrapper     ; ISN 31 (EXT31)
     316                    
     317                    
     318 00000084 FFFFFF20  osIRQIVEC          .word 0xFFFFff20
     319 00000088 00000000+ osCnstIntTable     .word osIRQTable
     320                    
     321 0000008c           _osIRQHandler
     322 0000008c E92D0007     stmfd  sp!,{r0-r2}          ; save scratch register
     323 00000090 E51F1014     ldr    r1, osIRQIVEC        ; r1 = IRQIVEC
     324 00000094 E51F0014     ldr    r0, osCnstIntTable   ; vector table base
     325 00000098 E5912000     ldr    r2, [r1]             ; r2 = IRQ Index
     326 0000009c E20220FF     and    r2, r2, #0xff        
     327 000000a0 E790F102     ldr    pc, [r0, r2, lsl#2]  ; jump to interrupt handler
     328                    
     329 00000000              .sect ".osarmvect"
     330 00000000           osARMVectTable
TMS470 COFF Assembler PC v4.1.4 Tue Oct 29 13:11:22 2013

Tools Copyright (c) 1996-2006 Texas Instruments Incorporated
intvect.asm                                                          PAGE    7

     331 00000000 EAFFFFFE!     b _osUndefInstruction                    ; Undefined Instruction
     332                     .if (osdTasksInUserMode==0)
     333 00000004 EAFFFFFD!     b _osDirectSWIDispatcher                       ; SWI
     334                     .else
     335                        b _osSWI                       ; SWI
     336                     .endif
     337                    
     338 00000008 EAFFFFFC!     b _osPrefetchAbort             ; Prefetch Abort
     339 0000000c EAFFFFFB!     b _osDataAbort                 ; Data Abort
     340 00000010 00000000      .word 0                        ; reserved
     341 00000014 EA00001C+     b _osIRQHandler                ; IRQ
     342 00000018 EAFFFFF8!     b _osFIQ                       ; FIQ
     343                    
     344                    
     345                       .end

No Assembly Errors, No Assembly Warnings
