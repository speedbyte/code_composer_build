/* file: UHV_NAR.ORT, automatically generated by GENTMS470.EXE, Version: 3.10 */
/* from: F:\MYDOCUMENTS\WORKSPACE\ECLIPSE\SYS_VW_UHV_NAR_TMS470\MOD\MOD_OSEK_DYN\CFG\UHV_NAR.oil */
/* at  : Tue Feb 10 14:31:29 2009 */
/* License 2400100185 for S1nn GmbH u. Co. KG, Infotainment and Connectivity */
/* Implementation: TMS470R1 */
/* Version of general code: 3.54b */


/***********************/
/* Declaration Section */
/***********************/

VERSION {
   KOIL = "2.1";
   OSSEMANTICS = "ORTI", "2.1";
};   /* VERSION */


IMPLEMENTATION Vector_ORTI_2_1 {
   OS {
      TOTRACE ENUM "unsigned short" [
         "NO_TASK" = 0xFFFF,
         "OsHostTask_10ms" = 0,
         "OsAppTask_event_5ms" = 1,
         "OsSystemTask_event" = 2,
         "OsDriverTask_1ms" = 3,
         "OsMonitorTask_50ms" = 4,
         "OsDatabaseTask_event_5ms" = 5,
         "OsIdleTask_bg" = 6,
         "OsInitTask" = 7
      ] RUNNINGTASK, "Running Task Identification";
      TOTRACE ENUM "unsigned char" [
         "NO_SERVICE"               =  0,
         "ActivateTask"             =  2,
         "TerminateTask"            =  4,
         "ChainTask"                =  6,
         "Schedule"                 =  8,
         "GetTaskID"                =  10,
         "GetTaskState"             =  12,
         "ResumeAllInterrupts"      =  14,
         "SuspendAllInterrupts"     =  16,
         "EnableAllInterrupts"      =  24,
         "DisableAllInterrupts"     =  26,
         "ResumeOSInterrupts"       =  28,
         "SuspendOSInterrupts"      =  30,
         "GetResource"              =  32,
         "ReleaseResource"          =  34,
         "SetEvent"                 =  36,
         "ClearEvent"               =  38,
         "GetEvent"                 =  40,
         "WaitEvent"                =  42,
         "GetAlarmBase"             =  44,
         "GetAlarm"                 =  46,
         "SetRelAlarm"              =  48,
         "SetAbsAlarm"              =  50,
         "CancelAlarm"              =  52,
         "GetActiveApplicationMode" =  54,
         "StartOS"                  =  56,
         "ShutdownOS"               =  58,
         "ErrorHook"                =  60,
         "PreTaskHook"              =  62,
         "PostTaskHook"             =  64,
         "StartupHook"              =  66,
         "ShutdownHook"             =  68,
         "StartCOM"                 =  70,
         "StopCOM"                  =  72,
         "SendMessage"              =  74,
         "ReceiveMessage"           =  76,
         "GetMessageResource"       =  78,
         "ReleaseMessageResource"   =  80,
         "GetMessageStatus"         =  82,
         "ReadFlag"                 =  84,
         "ResetFlag"                =  86
      ] SERVICETRACE, "OS Services Watch";
      ENUM "unsigned long*" [
         "osSystemStack" : osSystemStack = "osSystemStack"
      ] vs_SystemStack, "System Stack";

      ENUM "unsigned short" [
         "-" = 0xFFFF,
         "RES_SCHEDULER" = 0,
         "12" = 1,
         "12" = 2,
         "12" = 3,
         "12" = 4,
         "10" = 5,
         "10" = 6,
         "8" = 7,
         "8" = 8,
         "7" = 9,
         "4" = 10,
         "2" = 11,
         "2" = 12,
         "1" = 13,
         "0" = 14
      ] RUNNINGTASKPRIORITY, "Priority of Running Task";

      ENUM "unsigned char" [
         "E_OK"                      =  0,
         "E_OS_ACCESS"               =  1,
         "E_OS_CALLEVEL"             =  2,
         "E_OS_ID"                   =  3,
         "E_OS_LIMIT"                =  4,
         "E_OS_NOFUNC"               =  5,
         "E_OS_RESOURCE"             =  6,
         "E_OS_STATE"                =  7,
         "E_OS_VALUE"                =  8,
         "E_OS_SYS_ASSERTION"        =  9,
         "E_OS_SYS_ABORT"            = 10,
         "E_OS_SYS_DIS_INT"          = 11,
         "E_OS_SYS_API_ERROR"        = 12,
         "E_OS_SYS_ALARM_MANAGEMENT" = 13,
         "E_OS_SYS_WARNING"          = 14,
         "E_COM_BUSY"                = 32,
         "E_COM_ID"                  = 33,
         "E_COM_LIMIT"               = 34,
         "E_COM_LOCKED"              = 35,
         "E_COM_NOMSG"               = 36,
         "E_COM_RX_ON"               = 37,
         "E_COM_SYS_NOT_SUPPORTED"   = 48,
         "E_COM_SYS_NOTIFY_FAILED"   = 49,
         "E_COM_SYS_QUEUE_NOT_FOUND" = 50
      ] LASTERROR, "Last OSEK Error";

      ENUM "unsigned short" [
         "-" = 0,
         "ActivateTask: Called with invalid task ID                                           "   = 0x1101,
         "ActivateTask: Task has wrong priority level                                         "   = 0x1102,
         "ActivateTask: Number of activation exceeds limit                                    "   = 0x1103,
         "ActivateTask: Interrupts are disabled with functions provided by OSEK               "   = 0x1104,
         "ActivateTask: Number of activation exceeds limit (task activation is performed by alarm-expiration)         "   = 0x1105,
         "TerminateTask: Called with disabled interrupts                                     "   = 0x1201,
         "TerminateTask: Called with occupied resources                                      "   = 0x1202,
         "TerminateTask: Attempted for a task with activation counter == 0 (not activated)   "   = 0x1203,
         "TerminateTask: Called from an interrupt service routine                            "   = 0x1204,
         "ChainTask: Called with disabled interrupts                                         "   = 0x1301,
         "ChainTask: Called with occupied resources                                          "   = 0x1302,
         "ChainTask: New task has invalid ID                                                 "   = 0x1303,
         "ChainTask: Tried to terminate a task which have an activation counter which is zero"   = 0x1304,
         "ChainTask: Number of activation of new task exceeds limit                          "   = 0x1305,
         "ChainTask: Called on interrupt level                                               "   = 0x1306,
         "ChainTask: Task has wrong priority level                                           "   = 0x1307,
         "Schedule: Called with disabled interrupts                                          "   = 0x1401,
         "Schedule: Called on interrupt level                                                "   = 0x1402,
         "Schedule: Called from task with enabled stack sharing by setting NotUsingSchedule in the OIL-configurator   "   = 0x1403,
         "Schedule: Called inside a procedure                                                "   = 0x1404,
         "Schedule: Called with an occupied resource                                         "   = 0x1405,
         "GetTaskState: Called with invalid task ID                                          "   = 0x1501,
         "GetTaskState: Interrupts are disabled with functions provided by OSEK              "   = 0x1502,
         "GetTaskID: Interrupts are disabled with functions provided by OSEK                 "   = 0x1601,
         "Exit of task without the call of TerminateTask or ChainTask                        "   = 0x1701,
         "EnableAllInterrupts: DisableAllInterrupts not called before                        "   = 0x2401,
         "DisableAllInterrupts: Interrupts are disabled with functions provided by OSEK      "   = 0x2501,
         "ResumeOSInterrupts: SuspendOSInterrupts not called before                          "   = 0x2601,
         "SuspendOSInterrupts: Interrupts are disabled with functions provided by OSEK       "   = 0x2701,
         "An unhandled exception or interrupt was detected                                   "   = 0x2801,
         "osSaveDisableLevelNested: Wrong counter value detected                             "   = 0x2901,
         "osRestoreEnableLevelNested: Wrong counter value detected                           "   = 0x2A01,
         "osSaveDisableGlobalNested: Wrong counter value detected                            "   = 0x2B01,
         "osRestoreEnableGlobalNested: Wrong counter value detected                          "   = 0x2C01,
         "GetResource: Invalid resource ID                                                   "   = 0x3101,
         "GetResource: Ceiling priority of the specified resource already in use             "   = 0x3102,
         "GetResource: Resource already occupied                                             "   = 0x3103,
         "GetResource: Task has no access to the specified resource                          "   = 0x3104,
         "GetResource: Specified resource has a wrong priority. Possible reason: The task has no access rights to this resource" = 0x3105,
         "GetResource: Interrupts are disabled with functions provided by OSEK               "   = 0x3106,
         "ReleaseResource: Invalid resource ID                                               "   = 0x3201,
         "ReleaseResource: Ceiling priority of the resource not found in the ready bit field "   = 0x3202,
         "ReleaseResource: Resource occupied by a different task                             "   = 0x3203,
         "ReleaseResource: Specified resource has a wrong priority. Possible reason: The task has no access rights to this resource" = 0x3204,
         "ReleaseResource: Task has no access to the specified resource                      "   = 0x3205,
         "ReleaseResource: The specified resource is not occupied by the task                "   = 0x3206,
         "ReleaseResource: At least one other resource must be released before               "   = 0x3207,
         "ReleaseResource: Interrupts are disabled with functions provided by OSEK           "   = 0x3208,
         "SetEvent: Invalid task ID                                                          "   = 0x4101,
         "SetEvent: Cannot call SetEvent to basic task                                       "   = 0x4102,
         "SetEvent: Cannot SetEvent to task in SUSPENDED state                               "   = 0x4103,
         "SetEvent: Wrong task priority detected                                             "   = 0x4104,
         "SetEvent: Interrupts are disabled with functions provided by OSEK                  "   = 0x4105,
         "ClearEvent: A basic task cannot clear an event                                     "   = 0x4201,
         "ClearEvent Called on interrupt level                                               "   = 0x4202,
         "ClearEvent: Interrupts are disabled with functions provided by OSEK                "   = 0x4203,
         "GetEvent: Invalid task ID                                                          "   = 0x4301,
         "GetEvent: Cannot GetEvent from basic task                                          "   = 0x4302,
         "GetEvent: Cannot GetEvent from a task in SUSPENDED state                           "   = 0x4303,
         "GetEvent: Interrupts are disabled with functions provided by OSEK                  "   = 0x4304,
         "WaitEvent: Called by basic task                                                    "   = 0x4401,
         "WaitEvent: Called with occupied resources                                          "   = 0x4402,
         "WaitEvent: Called with disabled interrupts                                         "   = 0x4403,
         "WaitEvent: Called on interrupt level                                               "   = 0x4404,
         "WaitEvent: Called inside procedure                                                 "   = 0x4405,
         "GetAlarmBase: Invalid alarm ID                                                     "   = 0x5101,
         "GetAlarmBase: Interrupts are disabled with functions provided by OSEK              "   = 0x5102,
         "GetAlarm: Invalid alarm ID                                                         "   = 0x5201,
         "GetAlarm: Alarm not active                                                         "   = 0x5202,
         "GetAlarm: Interrupts are disabled with functions provided by OSEK                  "   = 0x5203,
         "SetRelAlarm: Invalid alarm id                                                      "   = 0x5301,
         "SetRelAlarm: Alarm already active                                                  "   = 0x5302,
         "SetRelAlarm: Specified cycle is out of range                                       "   = 0x5303,
         "SetRelAlarm: Specified delta is out of range                                       "   = 0x5304,
         "SetRelAlarm: Interrupts are disabled with functions provided by OSEK               "   = 0x5305,
         "SetAbsAlarm: Invalid alarm ID                                                      "   = 0x5401,
         "SetAbsAlarm: Alarm already active                                                  "   = 0x5402,
         "SetAbsAlarm: Specified cycle is out of range                                       "   = 0x5403,
         "SetAbsAlarm: Specified start is out of range                                       "   = 0x5404,
         "SetAbsAlarm: Interrupts are disabled with functions provided by OSEK               "   = 0x5405,
         "CancelAlarm: Invalid alarm ID                                                      "   = 0x5501,
         "CancelAlarm: Alarm not active                                                      "   = 0x5502,
         "CancelAlarm: Interrupts are disabled with functions provided by OSEK               "   = 0x5503,
         "CancelAlarm: Internal error detected while alarm was canceled                      "   = 0x5504,
         "osWorkAlarms: SetEvent in alarm of BCC1 or BCC2                                    "   = 0x5601,
         "Task stack overflow detected                                                       "   = 0x6101,
         "Scheduler called with enabled interrupts                                           "   = 0x6201,
         "Called with invalid task ID                                                        "   = 0x6301,
         "Wrong library linked to application                                                "   = 0x6401,
         "ErrorHook called with enabled interrupts                                           "   = 0x6501
      ] vs_osCANlastError, "Last osCAN Error";

      ENUM "unsigned char" [
         "OSDEFAULTAPPMODE"   = 0x01
      ] CURRENTAPPMODE, "Current application mode";
   }, "OS";   /* OS */


   TASK {
      ENUM "unsigned short" [
         "RES_SCHEDULER" = 0,
         "12" = 1,
         "12" = 2,
         "12" = 3,
         "12" = 4,
         "10" = 5,
         "10" = 6,
         "8" = 7,
         "8" = 8,
         "7" = 9,
         "4" = 10,
         "2" = 11,
         "2" = 12,
         "1" = 13,
         "0" = 14
      ] PRIORITY, "Actual Prio";
      STRING vs_HomePriority, "Home Prio";
      ENUM "unsigned char" [
         "READY"=0,
         "RUNNING"=1,
         "WAITING"=2,
         "READY"=3,
          "SUSPENDED"=4
,    "WAIT_SEMAPHORE"=5      ] STATE, "State";
      ENUM "void*" [
         "osTaskStack0" : osTaskStack0 = "osTaskStack0",
         "osTaskStack1" : osTaskStack1 = "osTaskStack1",
         "osTaskStack2" : osTaskStack2 = "osTaskStack2",
         "osTaskStack3" : osTaskStack3 = "osTaskStack3",
         "osTaskStack4" : osTaskStack4 = "osTaskStack4",
         "osTaskStack5" : osTaskStack5 = "osTaskStack5",
         "osTaskStack6" : osTaskStack6 = "osTaskStack6",
         "osTaskStack7" : osTaskStack7 = "osTaskStack7"
      ] STACK, "Task Stack";
      STRING vs_TaskType, "Task Type";
      STRING vs_Schedule, "Schedule";
      CTYPE "unsigned long" vs_WaitMask, "Wait Mask";
      CTYPE "unsigned long" vs_EventFlag, "Event Flag";
      CTYPE "unsigned char" CURRENTACTIVATIONS, "Activations";
      STRING vs_MaxActivations, "max. Activations";
      ENUM "unsigned short" [
         "Context_OsHostTask_10ms" : Context_OsHostTask_10ms = 0,
         "Context_OsAppTask_event_5ms" : Context_OsAppTask_event_5ms = 1,
         "Context_OsSystemTask_event" : Context_OsSystemTask_event = 2,
         "Context_OsDriverTask_1ms" : Context_OsDriverTask_1ms = 3,
         "Context_OsMonitorTask_50ms" : Context_OsMonitorTask_50ms = 4,
         "Context_OsDatabaseTask_event_5ms" : Context_OsDatabaseTask_event_5ms = 5,
         "Context_OsIdleTask_bg" : Context_OsIdleTask_bg = 6,
         "Context_OsInitTask" : Context_OsInitTask = 7
      ] CONTEXT, "Task Context";

   }, "Tasks";   /* TASK */


   CONTEXT {
      CTYPE "unsigned long" _ARM7_R0, "CPU register R0";
      CTYPE "unsigned long" _ARM7_R1, "CPU register R1";
      CTYPE "unsigned long" _ARM7_R2, "CPU register R2";
      CTYPE "unsigned long" _ARM7_R3, "CPU register R3";
      CTYPE "unsigned long" _ARM7_R4, "CPU register R4";
      CTYPE "unsigned long" _ARM7_R5, "CPU register R5";
      CTYPE "unsigned long" _ARM7_R6, "CPU register R6";
      CTYPE "unsigned long" _ARM7_R7, "CPU register R7";
      CTYPE "unsigned long" _ARM7_R8, "CPU register R8";
      CTYPE "unsigned long" _ARM7_R9, "CPU register R9";
      CTYPE "unsigned long" _ARM7_R10, "CPU register R10";
      CTYPE "unsigned long" _ARM7_R11, "CPU register R11";
      CTYPE "unsigned long" _ARM7_R12, "CPU register R12";
      CTYPE "unsigned long" _ARM7_R13, "CPU register R13";
      CTYPE "unsigned long" _ARM7_R14, "CPU register R14";
      CTYPE "unsigned long" _ARM7_R15, "CPU register R15 (PC)";
      CTYPE "unsigned long" _ARM7_CPSR, "CPU register CPSR";
      CTYPE "unsigned char" VALID;
   }, "Task Context";   /* CONTEXT */


   STACK {
      CTYPE "unsigned short" SIZE, "Stack Size (Byte)";
      CTYPE "unsigned short*" BASEADDRESS, "Stack Start Address";
      STRING STACKDIRECTION, "Stack Direction";
      CTYPE "unsigned short" FILLPATTERN, "Stack Fill Pattern";
   }, "Stacks";   /* STACK */


   vs_Event {
      STRING vs_EventMask, "Event Mask";
   }, "Events";   /* Events */


   ALARM {
      ENUM "unsigned char" [
         "STOPPED" = 0,
         "RUNNING" = 1
      ] STATE, "Alarm State";
      CTYPE "unsigned long" CYCLETIME, "Cycle Time (Ticks)";
      CTYPE "unsigned long" vs_CycleTime_ms, "Cycle Time (ms)";
      CTYPE "unsigned long" ALARMTIME, "Alarm Time (Ticks)";
      CTYPE "unsigned long" vs_AlarmTime_ms, "Alarm Time (ms)";
      STRING ACTION, "Action";
      STRING COUNTER, "Counter";
   }, "Alarms";   /* Alarms */

   RESOURCE {
      ENUM "unsigned char" [
         "LOCKED"=1,
         "UNLOCKED"=0
      ] STATE, "Resource State";
      ENUM "unsigned short" [
         "ISR"=0xFFFF,
         "OsInitTask" = 0,
         "OsHostTask_10ms" = 1,
         "OsAppTask_event_5ms" = 2,
         "OsSystemTask_event" = 3,
         "OsDriverTask_1ms" = 4,
         "OsMonitorTask_50ms" = 5,
         "OsDatabaseTask_event_5ms" = 6,
         "OsIdleTask_bg" = 7,
         "-" = 0xFFFE
      ] LOCKER, "Resource Locker";
      STRING PRIORITY, "Ceiling priority";
   }, "Resources";   /* Resources */

   MESSAGECONTAINER {
      STRING MSGNAME, "Message Name";
      STRING MSGTYPE, "Message Type";
      CTYPE QUEUESIZE, "Queue Size";
      CTYPE QUEUECOUNT, "Entry Count";
      CTYPE FIRSTELEMENT, "First Message";
      ENUM "unsigned char" [
         "E_OK"=0,
         "E_COM_BUSY"=32,
         "E_COM_ID"=33,
         "E_COM_LIMIT"=34,
         "E_COM_LOCKED"=35,
         "E_COM_NOMSG"=36,
         "E_COM_RX_ON"=37
      ] vs_State, "Message State";
      ENUM [
         "Task OsHostTask_10ms" : OsHostTask_10ms = 0,
         "Task OsAppTask_event_5ms" : OsAppTask_event_5ms = 1,
         "Task OsSystemTask_event" : OsSystemTask_event = 2,
         "Task OsDriverTask_1ms" : OsDriverTask_1ms = 3,
         "Task OsMonitorTask_50ms" : OsMonitorTask_50ms = 4
      ] vs_Sender, "Sender";
      ENUM [
         "Task OsHostTask_10ms" : OsHostTask_10ms = 0,
         "Task OsAppTask_event_5ms" : OsAppTask_event_5ms = 1,
         "Task OsSystemTask_event" : OsSystemTask_event = 2
      ] vs_Receiver, "Receiver";
   }, "Messages";   /* Messages */

   vs_OS_Config {
      ENUM "unsigned short" [
         "BCC1" = 0,
         "BCC2" = 1,
         "ECC1" = 2,
         "ECC2" = 3
      ] vs_CC,"Conformance Class";
      ENUM "unsigned short" [
         "STANDARD" = 0,
         "EXTENDED" = 1
      ] vs_STATUS_LEVEL, "Status Level";
      ENUM "unsigned short" [
         "NON-Preempt" = 0,
         "FULL-Preempt" = 1,
         "MIXED-Preempt" = 2
      ] vs_SCHEDULE, "Schedule";
      CTYPE "unsigned char" vs_OS_MAJ_VERSION, "OS Major-Release (OS)";
      CTYPE "unsigned char" vs_OS_MIN_VERSION, "OS Minor-Release (OS)";
      CTYPE "unsigned char" vs_GEN_MAJ_VERSION, "Generator Major-Release";
      CTYPE "unsigned char" vs_GEN_MIN_VERSION, "Generator Minor-Release";
   }, "OS Configuration"; /* OS Configuration */

}; /* END OF IMPLEMENTATION */


/***********************/
/* Information Section */
/***********************/

OS TMS470R1 {
   RUNNINGTASK = "osActiveTaskIndex";
   vs_SystemStack = "osSystemStack";
   SERVICETRACE = "osORTICurrentServiceId";
   RUNNINGTASKPRIORITY = "osActiveTaskPrio";
   LASTERROR = "osLastErrorCode";
   vs_osCANlastError = "osLastError";
   CURRENTAPPMODE = "1";
};   /* OS */

TASK OsHostTask_10ms {
   PRIORITY = "osTcbActualPrio[0]";
   vs_HomePriority = "10";
   STATE = "osTcbTaskState[0]";
   STACK = "osTaskStack1";
   vs_Schedule = "NON-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[0]";
   vs_EventFlag = "osTcbSetEventMask[0]";
   CURRENTACTIVATIONS = "osTcbTaskState[0] != 4";
   vs_MaxActivations = "1";
   CONTEXT="0";
};   /* OsHostTask_10ms*/

TASK OsAppTask_event_5ms {
   PRIORITY = "osTcbActualPrio[1]";
   vs_HomePriority = "8";
   STATE = "osTcbTaskState[1]";
   STACK = "osTaskStack2";
   vs_Schedule = "FULL-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[1]";
   vs_EventFlag = "osTcbSetEventMask[1]";
   CURRENTACTIVATIONS = "osTcbTaskState[1] != 4";
   vs_MaxActivations = "1";
   CONTEXT="1";
};   /* OsAppTask_event_5ms*/

TASK OsSystemTask_event {
   PRIORITY = "osTcbActualPrio[2]";
   vs_HomePriority = "7";
   STATE = "osTcbTaskState[2]";
   STACK = "osTaskStack3";
   vs_Schedule = "NON-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[2]";
   vs_EventFlag = "osTcbSetEventMask[2]";
   CURRENTACTIVATIONS = "osTcbTaskState[2] != 4";
   vs_MaxActivations = "1";
   CONTEXT="2";
};   /* OsSystemTask_event*/

TASK OsDriverTask_1ms {
   PRIORITY = "osTcbActualPrio[3]";
   vs_HomePriority = "4";
   STATE = "osTcbTaskState[3]";
   STACK = "osTaskStack4";
   vs_Schedule = "FULL-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[3]";
   vs_EventFlag = "osTcbSetEventMask[3]";
   CURRENTACTIVATIONS = "osTcbTaskState[3] != 4";
   vs_MaxActivations = "1";
   CONTEXT="3";
};   /* OsDriverTask_1ms*/

TASK OsMonitorTask_50ms {
   PRIORITY = "osTcbActualPrio[4]";
   vs_HomePriority = "2";
   STATE = "osTcbTaskState[4]";
   STACK = "osTaskStack5";
   vs_Schedule = "FULL-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[4]";
   vs_EventFlag = "osTcbSetEventMask[4]";
   CURRENTACTIVATIONS = "osTcbTaskState[4] != 4";
   vs_MaxActivations = "1";
   CONTEXT="4";
};   /* OsMonitorTask_50ms*/

TASK OsDatabaseTask_event_5ms {
   PRIORITY = "osTcbActualPrio[5]";
   vs_HomePriority = "1";
   STATE = "osTcbTaskState[5]";
   STACK = "osTaskStack6";
   vs_Schedule = "FULL-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[5]";
   vs_EventFlag = "osTcbSetEventMask[5]";
   CURRENTACTIVATIONS = "osTcbTaskState[5] != 4";
   vs_MaxActivations = "1";
   CONTEXT="5";
};   /* OsDatabaseTask_event_5ms*/

TASK OsIdleTask_bg {
   PRIORITY = "osTcbActualPrio[6]";
   vs_HomePriority = "0";
   STATE = "osTcbTaskState[6]";
   STACK = "osTaskStack7";
   vs_Schedule = "FULL-Preempt";
   vs_TaskType = "EXTENDED";
   vs_WaitMask = "osTcbWaitEventMask[6]";
   vs_EventFlag = "osTcbSetEventMask[6]";
   CURRENTACTIVATIONS = "osTcbTaskState[6] != 4";
   vs_MaxActivations = "1";
   CONTEXT="6";
};   /* OsIdleTask_bg*/

TASK OsInitTask {
   PRIORITY = "osTcbActualPrio[7]";
   vs_HomePriority = "12";
   STATE = "osTcbTaskState[7]";
   STACK = "osTaskStack0";
   vs_Schedule = "NON-Preempt";
   vs_TaskType = "BASIC";
   vs_WaitMask = "0";
   vs_EventFlag = "0";
   CURRENTACTIVATIONS = "osTcbTaskState[7] != 4";
   vs_MaxActivations = "1";
   CONTEXT="7";
};   /* OsInitTask*/

CONTEXT Context_OsHostTask_10ms {
   _ARM7_R0 = "((unsigned long*)osTcbSP[0])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[0])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[0])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[0])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[0])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[0])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[0])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[0])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[0])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[0])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[0])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[0])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[0])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[0]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[0])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[0])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[0])[3]";
   VALID = "((osTcbTaskState[0] == 2) || (osTcbTaskState[0] == 3))";
};   /* Context for Task: OsHostTask_10ms*/

CONTEXT Context_OsAppTask_event_5ms {
   _ARM7_R0 = "((unsigned long*)osTcbSP[1])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[1])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[1])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[1])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[1])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[1])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[1])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[1])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[1])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[1])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[1])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[1])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[1])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[1]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[1])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[1])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[1])[3]";
   VALID = "((osTcbTaskState[1] == 2) || (osTcbTaskState[1] == 3))";
};   /* Context for Task: OsAppTask_event_5ms*/

CONTEXT Context_OsSystemTask_event {
   _ARM7_R0 = "((unsigned long*)osTcbSP[2])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[2])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[2])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[2])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[2])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[2])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[2])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[2])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[2])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[2])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[2])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[2])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[2])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[2]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[2])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[2])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[2])[3]";
   VALID = "((osTcbTaskState[2] == 2) || (osTcbTaskState[2] == 3))";
};   /* Context for Task: OsSystemTask_event*/

CONTEXT Context_OsDriverTask_1ms {
   _ARM7_R0 = "((unsigned long*)osTcbSP[3])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[3])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[3])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[3])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[3])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[3])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[3])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[3])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[3])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[3])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[3])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[3])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[3])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[3]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[3])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[3])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[3])[3]";
   VALID = "((osTcbTaskState[3] == 2) || (osTcbTaskState[3] == 3))";
};   /* Context for Task: OsDriverTask_1ms*/

CONTEXT Context_OsMonitorTask_50ms {
   _ARM7_R0 = "((unsigned long*)osTcbSP[4])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[4])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[4])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[4])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[4])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[4])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[4])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[4])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[4])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[4])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[4])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[4])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[4])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[4]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[4])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[4])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[4])[3]";
   VALID = "((osTcbTaskState[4] == 2) || (osTcbTaskState[4] == 3))";
};   /* Context for Task: OsMonitorTask_50ms*/

CONTEXT Context_OsDatabaseTask_event_5ms {
   _ARM7_R0 = "((unsigned long*)osTcbSP[5])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[5])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[5])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[5])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[5])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[5])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[5])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[5])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[5])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[5])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[5])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[5])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[5])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[5]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[5])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[5])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[5])[3]";
   VALID = "((osTcbTaskState[5] == 2) || (osTcbTaskState[5] == 3))";
};   /* Context for Task: OsDatabaseTask_event_5ms*/

CONTEXT Context_OsIdleTask_bg {
   _ARM7_R0 = "((unsigned long*)osTcbSP[6])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[6])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[6])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[6])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[6])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[6])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[6])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[6])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[6])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[6])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[6])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[6])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[6])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[6]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[6])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[6])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[6])[3]";
   VALID = "((osTcbTaskState[6] == 2) || (osTcbTaskState[6] == 3))";
};   /* Context for Task: OsIdleTask_bg*/

CONTEXT Context_OsInitTask {
   _ARM7_R0 = "((unsigned long*)osTcbSP[7])[0]";
   _ARM7_R1 = "((unsigned long*)osTcbSP[7])[1]";
   _ARM7_R2 = "((unsigned long*)osTcbSP[7])[2]";
   _ARM7_R3 = "((unsigned long*)osTcbSP[7])[6]";
   _ARM7_R4 = "((unsigned long*)osTcbSP[7])[7]";
   _ARM7_R5 = "((unsigned long*)osTcbSP[7])[8]";
   _ARM7_R6 = "((unsigned long*)osTcbSP[7])[9]";
   _ARM7_R7 = "((unsigned long*)osTcbSP[7])[10]";
   _ARM7_R8 = "((unsigned long*)osTcbSP[7])[11]";
   _ARM7_R9 = "((unsigned long*)osTcbSP[7])[12]";
   _ARM7_R10 = "((unsigned long*)osTcbSP[7])[13]";
   _ARM7_R11 = "((unsigned long*)osTcbSP[7])[14]";
   _ARM7_R12 = "((unsigned long*)osTcbSP[7])[15]";
   _ARM7_R13 = "(unsigned long)osTcbSP[7]";
   _ARM7_R14 = "((unsigned long*)osTcbSP[7])[5]";
   _ARM7_R15 = "((unsigned long*)osTcbSP[7])[4]";
   _ARM7_CPSR = "((unsigned long*)osTcbSP[7])[3]";
   VALID = "((osTcbTaskState[7] == 2) || (osTcbTaskState[7] == 3))";
};   /* Context for Task: OsInitTask*/

STACK osSystemStack {
   SIZE = "400";
   BASEADDRESS = "osSystemStack";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack0 {
   SIZE = "460";
   BASEADDRESS = "osTaskStack0";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack1 {
   SIZE = "800";
   BASEADDRESS = "osTaskStack1";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack2 {
   SIZE = "1500";
   BASEADDRESS = "osTaskStack2";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack3 {
   SIZE = "400";
   BASEADDRESS = "osTaskStack3";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack4 {
   SIZE = "600";
   BASEADDRESS = "osTaskStack4";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack5 {
   SIZE = "400";
   BASEADDRESS = "osTaskStack5";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack6 {
   SIZE = "200";
   BASEADDRESS = "osTaskStack6";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

STACK osTaskStack7 {
   SIZE = "200";
   BASEADDRESS = "osTaskStack7";
   STACKDIRECTION = "DOWN";
   FILLPATTERN = "0xAA";
};

vs_Event evActivateHostTask_10ms {
   vs_EventMask = "0x00000001";
};

vs_Event evActivateMonitorTask_50ms {
   vs_EventMask = "0x00000001";
};

vs_Event evActivateDriverTask_1ms {
   vs_EventMask = "0x00000001";
};

vs_Event evActivateAppTask_event_5ms {
   vs_EventMask = "0x00000001";
};

vs_Event evActivateDatabaseTask_event_5ms {
   vs_EventMask = "0x00000001";
};

vs_Event evActivateSystemTask_event {
   vs_EventMask = "0x00000001";
};

vs_Event evSystemStateBtModInitiated {
   vs_EventMask = "0x00000002";
};

vs_Event evApp3ButMod {
   vs_EventMask = "0x00000002";
};

vs_Event evAppTaskPhoneBapInd {
   vs_EventMask = "0x00000004";
};

vs_Event evHostTaskPhoneBapReq {
   vs_EventMask = "0x00000002";
};

vs_Event evAppTaskErmATResponse {
   vs_EventMask = "0x00000008";
};

vs_Event evAppTaskPhoneATResponse {
   vs_EventMask = "0x00000010";
};

vs_Event evSystemTaskShutdown {
   vs_EventMask = "0x00000004";
};

vs_Event evAppTaskPhoneFctPending {
   vs_EventMask = "0x00000020";
};

vs_Event evAppTaskPhoneBookBapInd {
   vs_EventMask = "0x00000040";
};

vs_Event evHostTaskPhoneBookBapReq {
   vs_EventMask = "0x00000004";
};

vs_Event evAppTaskPhoneBookATResponse {
   vs_EventMask = "0x00000080";
};

vs_Event evAppTaskPhoneBookFctPending {
   vs_EventMask = "0x00000100";
};

vs_Event evAppTaskMdiBapInd {
   vs_EventMask = "0x00000200";
};

vs_Event evAppTaskMdiATResponse {
   vs_EventMask = "0x00000400";
};

vs_Event evHostTaskMdiBapReq {
   vs_EventMask = "0x00000008";
};

vs_Event evAppTaskMdiFctPending {
   vs_EventMask = "0x00000800";
};

vs_Event evAppTaskERMBTVisibleTimer {
   vs_EventMask = "0x00001000";
};

vs_Event evAppTaskPhonebookSpeedBoarder {
   vs_EventMask = "0x00002000";
};

vs_Event evHostTaskMuteBehavior {
   vs_EventMask = "0x00000010";
};

vs_Event evDatabaseTaskUpdateEerpomData {
   vs_EventMask = "0x00000002";
};

vs_Event evSystemTaskVoltageState {
   vs_EventMask = "0x00000008";
};

vs_Event evSystemTaskCANInfotainmentInfo {
   vs_EventMask = "0x00000010";
};

vs_Event evHostTaskCyclicTxMsg {
   vs_EventMask = "0x00000020";
};

vs_Event evAppTaskVCRATResponse {
   vs_EventMask = "0x00004000";
};

vs_Event evAppTaskVCRAT_OK {
   vs_EventMask = "0x00008000";
};

vs_Event evAppTaskVCRAT_ERROR {
   vs_EventMask = "0x00010000";
};

vs_Event evAppTaskVCRPending {
   vs_EventMask = "0x00020000";
};

vs_Event evAppTaskERMPending {
   vs_EventMask = "0x00040000";
};

vs_Event evAppTaskPhoneBookBapFctPending {
   vs_EventMask = "0x00080000";
};

vs_Event evIdleTaskWD {
   vs_EventMask = "0x00000001";
};

vs_Event evAppTaskKpbBapInd {
   vs_EventMask = "0x00100000";
};

vs_Event evHostTaskKpbBapReq {
   vs_EventMask = "0x00000040";
};

vs_Event evAppTaskKpbPending {
   vs_EventMask = "0x00200000";
};

vs_Event evAppTaskSmsFctPending {
   vs_EventMask = "0x00400000";
};

vs_Event evAppTaskSmsATResponse {
   vs_EventMask = "0x00800000";
};

vs_Event evHostTaskDiagnoseResponse {
   vs_EventMask = "0x00000080";
};

vs_Event evAppTaskDiagnoseRequest {
   vs_EventMask = "0x01000000";
};

vs_Event evAppTaskPhoneBapFctPending {
   vs_EventMask = "0x02000000";
};

vs_Event evAppTaskMFLKeys {
   vs_EventMask = "0x04000000";
};

vs_Event evMonitorTask_MonitorAudio_for_DTC {
   vs_EventMask = "0x00000002";
};

vs_Event evAppTaskSdFctPending {
   vs_EventMask = "0x08000000";
};

vs_Event evHostTaskMflTimer {
   vs_EventMask = "0x00000100";
};

vs_Event evAppTaskDeviceFctPending {
   vs_EventMask = "0x10000000";
};

vs_Event evAppTaskVCRSupervisor {
   vs_EventMask = "0x20000000";
};

vs_Event evHostTaskASRCyclicTxMsg {
   vs_EventMask = "0x00000200";
};

vs_Event evHostTaskASRStatus {
   vs_EventMask = "0x00000400";
};

vs_Event evHostTaskASRTrigger {
   vs_EventMask = "0x00000800";
};

vs_Event evAppTaskSystemStates {
   vs_EventMask = "0x40000000";
};

vs_Event evSystemTaskCallbackShutdown {
   vs_EventMask = "0x00000020";
};

vs_Event evDriverTask_TimerForButtonDetection_10ms {
   vs_EventMask = "0x00000002";
};

ALARM CTA_HOST {
   CYCLETIME = "osAlarmCycleTime[0]";
   vs_CycleTime_ms = "(osAlarmCycleTime[0]*1)/1";
   ALARMTIME = "(osAlarmTime[0]-osSystemCounter)*osAlarmActivated[0]";
   vs_AlarmTime_ms = "(((osAlarmTime[0]-osSystemCounter)*1)/1)*osAlarmActivated[0]";
   ACTION = "SetEvent evActivateHostTask_10ms -> OsHostTask_10ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[0] == 0) ? 0 : 1";

};   /* CTA_HOST*/

ALARM CTA_MONITOR {
   CYCLETIME = "osAlarmCycleTime[1]";
   vs_CycleTime_ms = "(osAlarmCycleTime[1]*1)/1";
   ALARMTIME = "(osAlarmTime[1]-osSystemCounter)*osAlarmActivated[1]";
   vs_AlarmTime_ms = "(((osAlarmTime[1]-osSystemCounter)*1)/1)*osAlarmActivated[1]";
   ACTION = "SetEvent evActivateMonitorTask_50ms -> OsMonitorTask_50ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[1] == 0) ? 0 : 1";

};   /* CTA_MONITOR*/

ALARM CTA_DRIVER {
   CYCLETIME = "osAlarmCycleTime[2]";
   vs_CycleTime_ms = "(osAlarmCycleTime[2]*1)/1";
   ALARMTIME = "(osAlarmTime[2]-osSystemCounter)*osAlarmActivated[2]";
   vs_AlarmTime_ms = "(((osAlarmTime[2]-osSystemCounter)*1)/1)*osAlarmActivated[2]";
   ACTION = "SetEvent evActivateDriverTask_1ms -> OsDriverTask_1ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[2] == 0) ? 0 : 1";

};   /* CTA_DRIVER*/

ALARM CTA_DATABASE {
   CYCLETIME = "osAlarmCycleTime[3]";
   vs_CycleTime_ms = "(osAlarmCycleTime[3]*1)/1";
   ALARMTIME = "(osAlarmTime[3]-osSystemCounter)*osAlarmActivated[3]";
   vs_AlarmTime_ms = "(((osAlarmTime[3]-osSystemCounter)*1)/1)*osAlarmActivated[3]";
   ACTION = "SetEvent evActivateDatabaseTask_event_5ms -> OsDatabaseTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[3] == 0) ? 0 : 1";

};   /* CTA_DATABASE*/

ALARM CTA_APP {
   CYCLETIME = "osAlarmCycleTime[4]";
   vs_CycleTime_ms = "(osAlarmCycleTime[4]*1)/1";
   ALARMTIME = "(osAlarmTime[4]-osSystemCounter)*osAlarmActivated[4]";
   vs_AlarmTime_ms = "(((osAlarmTime[4]-osSystemCounter)*1)/1)*osAlarmActivated[4]";
   ACTION = "SetEvent evActivateAppTask_event_5ms -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[4] == 0) ? 0 : 1";

};   /* CTA_APP*/

ALARM CTA_APP_PHONE_BAP_IND {
   CYCLETIME = "osAlarmCycleTime[5]";
   vs_CycleTime_ms = "(osAlarmCycleTime[5]*1)/1";
   ALARMTIME = "(osAlarmTime[5]-osSystemCounter)*osAlarmActivated[5]";
   vs_AlarmTime_ms = "(((osAlarmTime[5]-osSystemCounter)*1)/1)*osAlarmActivated[5]";
   ACTION = "SetEvent evAppTaskPhoneBapInd -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[5] == 0) ? 0 : 1";

};   /* CTA_APP_PHONE_BAP_IND*/

ALARM CTA_APP_PHONE_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[6]";
   vs_CycleTime_ms = "(osAlarmCycleTime[6]*1)/1";
   ALARMTIME = "(osAlarmTime[6]-osSystemCounter)*osAlarmActivated[6]";
   vs_AlarmTime_ms = "(((osAlarmTime[6]-osSystemCounter)*1)/1)*osAlarmActivated[6]";
   ACTION = "SetEvent evAppTaskPhoneFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[6] == 0) ? 0 : 1";

};   /* CTA_APP_PHONE_FCT_PENDING*/

ALARM CTA_APP_PHONEBOOK_BAP_IND {
   CYCLETIME = "osAlarmCycleTime[7]";
   vs_CycleTime_ms = "(osAlarmCycleTime[7]*1)/1";
   ALARMTIME = "(osAlarmTime[7]-osSystemCounter)*osAlarmActivated[7]";
   vs_AlarmTime_ms = "(((osAlarmTime[7]-osSystemCounter)*1)/1)*osAlarmActivated[7]";
   ACTION = "SetEvent evAppTaskPhoneBookBapInd -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[7] == 0) ? 0 : 1";

};   /* CTA_APP_PHONEBOOK_BAP_IND*/

ALARM CTA_APP_PHONEBOOK_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[8]";
   vs_CycleTime_ms = "(osAlarmCycleTime[8]*1)/1";
   ALARMTIME = "(osAlarmTime[8]-osSystemCounter)*osAlarmActivated[8]";
   vs_AlarmTime_ms = "(((osAlarmTime[8]-osSystemCounter)*1)/1)*osAlarmActivated[8]";
   ACTION = "SetEvent evAppTaskPhoneBookFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[8] == 0) ? 0 : 1";

};   /* CTA_APP_PHONEBOOK_FCT_PENDING*/

ALARM CTA_APP_MDI_BAP_IND {
   CYCLETIME = "osAlarmCycleTime[9]";
   vs_CycleTime_ms = "(osAlarmCycleTime[9]*1)/1";
   ALARMTIME = "(osAlarmTime[9]-osSystemCounter)*osAlarmActivated[9]";
   vs_AlarmTime_ms = "(((osAlarmTime[9]-osSystemCounter)*1)/1)*osAlarmActivated[9]";
   ACTION = "SetEvent evAppTaskMdiBapInd -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[9] == 0) ? 0 : 1";

};   /* CTA_APP_MDI_BAP_IND*/

ALARM CTA_APP_MDI_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[10]";
   vs_CycleTime_ms = "(osAlarmCycleTime[10]*1)/1";
   ALARMTIME = "(osAlarmTime[10]-osSystemCounter)*osAlarmActivated[10]";
   vs_AlarmTime_ms = "(((osAlarmTime[10]-osSystemCounter)*1)/1)*osAlarmActivated[10]";
   ACTION = "SetEvent evAppTaskMdiFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[10] == 0) ? 0 : 1";

};   /* CTA_APP_MDI_FCT_PENDING*/

ALARM CTA_ERM_BT_VISIBILITY_TIMER {
   CYCLETIME = "osAlarmCycleTime[11]";
   vs_CycleTime_ms = "(osAlarmCycleTime[11]*1)/1";
   ALARMTIME = "(osAlarmTime[11]-osSystemCounter)*osAlarmActivated[11]";
   vs_AlarmTime_ms = "(((osAlarmTime[11]-osSystemCounter)*1)/1)*osAlarmActivated[11]";
   ACTION = "SetEvent evAppTaskERMBTVisibleTimer -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[11] == 0) ? 0 : 1";

};   /* CTA_ERM_BT_VISIBILITY_TIMER*/

ALARM CTA_BTMOD_TIMEOUT {
   CYCLETIME = "osAlarmCycleTime[12]";
   vs_CycleTime_ms = "(osAlarmCycleTime[12]*1)/1";
   ALARMTIME = "(osAlarmTime[12]-osSystemCounter)*osAlarmActivated[12]";
   vs_AlarmTime_ms = "(((osAlarmTime[12]-osSystemCounter)*1)/1)*osAlarmActivated[12]";
   ACTION = "Callback ctaBtTimeout_cb";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[12] == 0) ? 0 : 1";

};   /* CTA_BTMOD_TIMEOUT*/

ALARM CTA_DB_UPDATE_EEPROM_DATA {
   CYCLETIME = "osAlarmCycleTime[13]";
   vs_CycleTime_ms = "(osAlarmCycleTime[13]*1)/1";
   ALARMTIME = "(osAlarmTime[13]-osSystemCounter)*osAlarmActivated[13]";
   vs_AlarmTime_ms = "(((osAlarmTime[13]-osSystemCounter)*1)/1)*osAlarmActivated[13]";
   ACTION = "SetEvent evDatabaseTaskUpdateEerpomData -> OsDatabaseTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[13] == 0) ? 0 : 1";

};   /* CTA_DB_UPDATE_EEPROM_DATA*/

ALARM CTA_SYSTEM {
   CYCLETIME = "osAlarmCycleTime[14]";
   vs_CycleTime_ms = "(osAlarmCycleTime[14]*1)/1";
   ALARMTIME = "(osAlarmTime[14]-osSystemCounter)*osAlarmActivated[14]";
   vs_AlarmTime_ms = "(((osAlarmTime[14]-osSystemCounter)*1)/1)*osAlarmActivated[14]";
   ACTION = "SetEvent evActivateSystemTask_event -> OsSystemTask_event";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[14] == 0) ? 0 : 1";

};   /* CTA_SYSTEM*/

ALARM CTA_HOST_TASK_CYCLIC_CAN_TX_MSG {
   CYCLETIME = "osAlarmCycleTime[15]";
   vs_CycleTime_ms = "(osAlarmCycleTime[15]*1)/1";
   ALARMTIME = "(osAlarmTime[15]-osSystemCounter)*osAlarmActivated[15]";
   vs_AlarmTime_ms = "(((osAlarmTime[15]-osSystemCounter)*1)/1)*osAlarmActivated[15]";
   ACTION = "SetEvent evHostTaskCyclicTxMsg -> OsHostTask_10ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[15] == 0) ? 0 : 1";

};   /* CTA_HOST_TASK_CYCLIC_CAN_TX_MSG*/

ALARM CTA_VCR_PENDING {
   CYCLETIME = "osAlarmCycleTime[16]";
   vs_CycleTime_ms = "(osAlarmCycleTime[16]*1)/1";
   ALARMTIME = "(osAlarmTime[16]-osSystemCounter)*osAlarmActivated[16]";
   vs_AlarmTime_ms = "(((osAlarmTime[16]-osSystemCounter)*1)/1)*osAlarmActivated[16]";
   ACTION = "SetEvent evAppTaskVCRPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[16] == 0) ? 0 : 1";

};   /* CTA_VCR_PENDING*/

ALARM CTA_ERM_PENDING {
   CYCLETIME = "osAlarmCycleTime[17]";
   vs_CycleTime_ms = "(osAlarmCycleTime[17]*1)/1";
   ALARMTIME = "(osAlarmTime[17]-osSystemCounter)*osAlarmActivated[17]";
   vs_AlarmTime_ms = "(((osAlarmTime[17]-osSystemCounter)*1)/1)*osAlarmActivated[17]";
   ACTION = "SetEvent evAppTaskERMPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[17] == 0) ? 0 : 1";

};   /* CTA_ERM_PENDING*/

ALARM CTA_APP_PHONEBOOK_PB_INIT_PENDING {
   CYCLETIME = "osAlarmCycleTime[18]";
   vs_CycleTime_ms = "(osAlarmCycleTime[18]*1)/1";
   ALARMTIME = "(osAlarmTime[18]-osSystemCounter)*osAlarmActivated[18]";
   vs_AlarmTime_ms = "(((osAlarmTime[18]-osSystemCounter)*1)/1)*osAlarmActivated[18]";
   ACTION = "SetEvent evAppTaskPhoneBookBapFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[18] == 0) ? 0 : 1";

};   /* CTA_APP_PHONEBOOK_PB_INIT_PENDING*/

ALARM CTA_WD {
   CYCLETIME = "osAlarmCycleTime[19]";
   vs_CycleTime_ms = "(osAlarmCycleTime[19]*1)/1";
   ALARMTIME = "(osAlarmTime[19]-osSystemCounter)*osAlarmActivated[19]";
   vs_AlarmTime_ms = "(((osAlarmTime[19]-osSystemCounter)*1)/1)*osAlarmActivated[19]";
   ACTION = "SetEvent evIdleTaskWD -> OsIdleTask_bg";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[19] == 0) ? 0 : 1";

};   /* CTA_WD*/

ALARM CTA_ASG_SV_TIMEOUT {
   CYCLETIME = "osAlarmCycleTime[20]";
   vs_CycleTime_ms = "(osAlarmCycleTime[20]*1)/1";
   ALARMTIME = "(osAlarmTime[20]-osSystemCounter)*osAlarmActivated[20]";
   vs_AlarmTime_ms = "(((osAlarmTime[20]-osSystemCounter)*1)/1)*osAlarmActivated[20]";
   ACTION = "Callback KPB_cbAsgSupervision";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[20] == 0) ? 0 : 1";

};   /* CTA_ASG_SV_TIMEOUT*/

ALARM CTA_FRAME_DATA_ACK_TIMEOUT {
   CYCLETIME = "osAlarmCycleTime[21]";
   vs_CycleTime_ms = "(osAlarmCycleTime[21]*1)/1";
   ALARMTIME = "(osAlarmTime[21]-osSystemCounter)*osAlarmActivated[21]";
   vs_AlarmTime_ms = "(((osAlarmTime[21]-osSystemCounter)*1)/1)*osAlarmActivated[21]";
   ACTION = "Callback KPB_cbFrameDataAckTimeout";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[21] == 0) ? 0 : 1";

};   /* CTA_FRAME_DATA_ACK_TIMEOUT*/

ALARM CTA_APP_SMS_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[22]";
   vs_CycleTime_ms = "(osAlarmCycleTime[22]*1)/1";
   ALARMTIME = "(osAlarmTime[22]-osSystemCounter)*osAlarmActivated[22]";
   vs_AlarmTime_ms = "(((osAlarmTime[22]-osSystemCounter)*1)/1)*osAlarmActivated[22]";
   ACTION = "SetEvent evAppTaskSmsFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[22] == 0) ? 0 : 1";

};   /* CTA_APP_SMS_FCT_PENDING*/

ALARM CTA_APP_PHONEBOOK_BAP_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[23]";
   vs_CycleTime_ms = "(osAlarmCycleTime[23]*1)/1";
   ALARMTIME = "(osAlarmTime[23]-osSystemCounter)*osAlarmActivated[23]";
   vs_AlarmTime_ms = "(((osAlarmTime[23]-osSystemCounter)*1)/1)*osAlarmActivated[23]";
   ACTION = "SetEvent evAppTaskPhoneBookBapFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[23] == 0) ? 0 : 1";

};   /* CTA_APP_PHONEBOOK_BAP_FCT_PENDING*/

ALARM CTA_APP_PHONE_BAP_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[24]";
   vs_CycleTime_ms = "(osAlarmCycleTime[24]*1)/1";
   ALARMTIME = "(osAlarmTime[24]-osSystemCounter)*osAlarmActivated[24]";
   vs_AlarmTime_ms = "(((osAlarmTime[24]-osSystemCounter)*1)/1)*osAlarmActivated[24]";
   ACTION = "SetEvent evAppTaskPhoneBapFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[24] == 0) ? 0 : 1";

};   /* CTA_APP_PHONE_BAP_FCT_PENDING*/

ALARM CTA_MONITOR_AUDIO {
   CYCLETIME = "osAlarmCycleTime[25]";
   vs_CycleTime_ms = "(osAlarmCycleTime[25]*1)/1";
   ALARMTIME = "(osAlarmTime[25]-osSystemCounter)*osAlarmActivated[25]";
   vs_AlarmTime_ms = "(((osAlarmTime[25]-osSystemCounter)*1)/1)*osAlarmActivated[25]";
   ACTION = "SetEvent evMonitorTask_MonitorAudio_for_DTC -> OsMonitorTask_50ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[25] == 0) ? 0 : 1";

};   /* CTA_MONITOR_AUDIO*/

ALARM CTA_MUTEMANAGER_MUTEDELAY {
   CYCLETIME = "osAlarmCycleTime[26]";
   vs_CycleTime_ms = "(osAlarmCycleTime[26]*1)/1";
   ALARMTIME = "(osAlarmTime[26]-osSystemCounter)*osAlarmActivated[26]";
   vs_AlarmTime_ms = "(((osAlarmTime[26]-osSystemCounter)*1)/1)*osAlarmActivated[26]";
   ACTION = "Callback MUTE_MANAGER_cbSetAudioMute";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[26] == 0) ? 0 : 1";

};   /* CTA_MUTEMANAGER_MUTEDELAY*/

ALARM CTA_LED_RED_LED {
   CYCLETIME = "osAlarmCycleTime[27]";
   vs_CycleTime_ms = "(osAlarmCycleTime[27]*1)/1";
   ALARMTIME = "(osAlarmTime[27]-osSystemCounter)*osAlarmActivated[27]";
   vs_AlarmTime_ms = "(((osAlarmTime[27]-osSystemCounter)*1)/1)*osAlarmActivated[27]";
   ACTION = "Callback LED_cbToggleRedLed";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[27] == 0) ? 0 : 1";

};   /* CTA_LED_RED_LED*/

ALARM CTA_LED_GREEN_LED {
   CYCLETIME = "osAlarmCycleTime[28]";
   vs_CycleTime_ms = "(osAlarmCycleTime[28]*1)/1";
   ALARMTIME = "(osAlarmTime[28]-osSystemCounter)*osAlarmActivated[28]";
   vs_AlarmTime_ms = "(((osAlarmTime[28]-osSystemCounter)*1)/1)*osAlarmActivated[28]";
   ACTION = "Callback LED_cbToggleGreenLed";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[28] == 0) ? 0 : 1";

};   /* CTA_LED_GREEN_LED*/

ALARM CTA_APP_SD_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[29]";
   vs_CycleTime_ms = "(osAlarmCycleTime[29]*1)/1";
   ALARMTIME = "(osAlarmTime[29]-osSystemCounter)*osAlarmActivated[29]";
   vs_AlarmTime_ms = "(((osAlarmTime[29]-osSystemCounter)*1)/1)*osAlarmActivated[29]";
   ACTION = "SetEvent evAppTaskSdFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[29] == 0) ? 0 : 1";

};   /* CTA_APP_SD_FCT_PENDING*/

ALARM CTA_KPB_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[30]";
   vs_CycleTime_ms = "(osAlarmCycleTime[30]*1)/1";
   ALARMTIME = "(osAlarmTime[30]-osSystemCounter)*osAlarmActivated[30]";
   vs_AlarmTime_ms = "(((osAlarmTime[30]-osSystemCounter)*1)/1)*osAlarmActivated[30]";
   ACTION = "SetEvent evAppTaskKpbPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[30] == 0) ? 0 : 1";

};   /* CTA_KPB_FCT_PENDING*/

ALARM CTA_MFL_LONGPRESS_TIMER {
   CYCLETIME = "osAlarmCycleTime[31]";
   vs_CycleTime_ms = "(osAlarmCycleTime[31]*1)/1";
   ALARMTIME = "(osAlarmTime[31]-osSystemCounter)*osAlarmActivated[31]";
   vs_AlarmTime_ms = "(((osAlarmTime[31]-osSystemCounter)*1)/1)*osAlarmActivated[31]";
   ACTION = "SetEvent evHostTaskMflTimer -> OsHostTask_10ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[31] == 0) ? 0 : 1";

};   /* CTA_MFL_LONGPRESS_TIMER*/

ALARM CTA_APP_SD_FRAME_TIMEOUT {
   CYCLETIME = "osAlarmCycleTime[32]";
   vs_CycleTime_ms = "(osAlarmCycleTime[32]*1)/1";
   ALARMTIME = "(osAlarmTime[32]-osSystemCounter)*osAlarmActivated[32]";
   vs_AlarmTime_ms = "(((osAlarmTime[32]-osSystemCounter)*1)/1)*osAlarmActivated[32]";
   ACTION = "Callback APP_SD_cbFrameTimeout";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[32] == 0) ? 0 : 1";

};   /* CTA_APP_SD_FRAME_TIMEOUT*/

ALARM CTA_APP_DEVICE_FCT_PENDING {
   CYCLETIME = "osAlarmCycleTime[33]";
   vs_CycleTime_ms = "(osAlarmCycleTime[33]*1)/1";
   ALARMTIME = "(osAlarmTime[33]-osSystemCounter)*osAlarmActivated[33]";
   vs_AlarmTime_ms = "(((osAlarmTime[33]-osSystemCounter)*1)/1)*osAlarmActivated[33]";
   ACTION = "SetEvent evAppTaskDeviceFctPending -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[33] == 0) ? 0 : 1";

};   /* CTA_APP_DEVICE_FCT_PENDING*/

ALARM CTA_VCR_SUPERVISOR {
   CYCLETIME = "osAlarmCycleTime[34]";
   vs_CycleTime_ms = "(osAlarmCycleTime[34]*1)/1";
   ALARMTIME = "(osAlarmTime[34]-osSystemCounter)*osAlarmActivated[34]";
   vs_AlarmTime_ms = "(((osAlarmTime[34]-osSystemCounter)*1)/1)*osAlarmActivated[34]";
   ACTION = "SetEvent evAppTaskVCRSupervisor -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[34] == 0) ? 0 : 1";

};   /* CTA_VCR_SUPERVISOR*/

ALARM CTA_APP_MDI_DGPS_REQUEST {
   CYCLETIME = "osAlarmCycleTime[35]";
   vs_CycleTime_ms = "(osAlarmCycleTime[35]*1)/1";
   ALARMTIME = "(osAlarmTime[35]-osSystemCounter)*osAlarmActivated[35]";
   vs_AlarmTime_ms = "(((osAlarmTime[35]-osSystemCounter)*1)/1)*osAlarmActivated[35]";
   ACTION = "Callback APP_MDI_cbDgpsRequestAlarm";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[35] == 0) ? 0 : 1";

};   /* CTA_APP_MDI_DGPS_REQUEST*/

ALARM CTA_HOST_TASK_CYCLIC_CAN_ASR_TX_MSG {
   CYCLETIME = "osAlarmCycleTime[36]";
   vs_CycleTime_ms = "(osAlarmCycleTime[36]*1)/1";
   ALARMTIME = "(osAlarmTime[36]-osSystemCounter)*osAlarmActivated[36]";
   vs_AlarmTime_ms = "(((osAlarmTime[36]-osSystemCounter)*1)/1)*osAlarmActivated[36]";
   ACTION = "SetEvent evHostTaskASRCyclicTxMsg -> OsHostTask_10ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[36] == 0) ? 0 : 1";

};   /* CTA_HOST_TASK_CYCLIC_CAN_ASR_TX_MSG*/

ALARM CTA_UART_SUPERVISION {
   CYCLETIME = "osAlarmCycleTime[37]";
   vs_CycleTime_ms = "(osAlarmCycleTime[37]*1)/1";
   ALARMTIME = "(osAlarmTime[37]-osSystemCounter)*osAlarmActivated[37]";
   vs_AlarmTime_ms = "(((osAlarmTime[37]-osSystemCounter)*1)/1)*osAlarmActivated[37]";
   ACTION = "Callback ERM_UartSupervision";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[37] == 0) ? 0 : 1";

};   /* CTA_UART_SUPERVISION*/

ALARM CTA_HOST_ASR_TRIGGER {
   CYCLETIME = "osAlarmCycleTime[38]";
   vs_CycleTime_ms = "(osAlarmCycleTime[38]*1)/1";
   ALARMTIME = "(osAlarmTime[38]-osSystemCounter)*osAlarmActivated[38]";
   vs_AlarmTime_ms = "(((osAlarmTime[38]-osSystemCounter)*1)/1)*osAlarmActivated[38]";
   ACTION = "SetEvent evHostTaskASRTrigger -> OsHostTask_10ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[38] == 0) ? 0 : 1";

};   /* CTA_HOST_ASR_TRIGGER*/

ALARM CTA_APP_KPB_BAP_IND {
   CYCLETIME = "osAlarmCycleTime[39]";
   vs_CycleTime_ms = "(osAlarmCycleTime[39]*1)/1";
   ALARMTIME = "(osAlarmTime[39]-osSystemCounter)*osAlarmActivated[39]";
   vs_AlarmTime_ms = "(((osAlarmTime[39]-osSystemCounter)*1)/1)*osAlarmActivated[39]";
   ACTION = "SetEvent evAppTaskKpbBapInd -> OsAppTask_event_5ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[39] == 0) ? 0 : 1";

};   /* CTA_APP_KPB_BAP_IND*/

ALARM CTA_DRIVER_TIMER_10MS {
   CYCLETIME = "osAlarmCycleTime[40]";
   vs_CycleTime_ms = "(osAlarmCycleTime[40]*1)/1";
   ALARMTIME = "(osAlarmTime[40]-osSystemCounter)*osAlarmActivated[40]";
   vs_AlarmTime_ms = "(((osAlarmTime[40]-osSystemCounter)*1)/1)*osAlarmActivated[40]";
   ACTION = "SetEvent evDriverTask_TimerForButtonDetection_10ms -> OsDriverTask_1ms";
   COUNTER = "SystemTimer";
   STATE = "(osAlarmActivated[40] == 0) ? 0 : 1";

};   /* CTA_DRIVER_TIMER_10MS*/

RESOURCE CK5050_WRITE_Resource {
   STATE = "(osResOccupationCounter[0] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[0] != 0) ? osResActualTask[0] : 0xFFFE";
   PRIORITY = "TASK: 8";
};

RESOURCE EEPROM_LockResource {
   STATE = "(osResOccupationCounter[1] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[1] != 0) ? osResActualTask[1] : 0xFFFE";
   PRIORITY = "TASK: 12";
};

RESOURCE UART_LockResource {
   STATE = "(osResOccupationCounter[2] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[2] != 0) ? osResActualTask[2] : 0xFFFE";
   PRIORITY = "not assigned";
};

RESOURCE CRC_LockResource {
   STATE = "(osResOccupationCounter[3] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[3] != 0) ? osResActualTask[3] : 0xFFFE";
   PRIORITY = "TASK: 2";
};

RESOURCE POOL_LockResource {
   STATE = "(osResOccupationCounter[4] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[4] != 0) ? osResActualTask[4] : 0xFFFE";
   PRIORITY = "TASK: 10";
};

RESOURCE DEH_LockResource {
   STATE = "(osResOccupationCounter[5] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[5] != 0) ? osResActualTask[5] : 0xFFFE";
   PRIORITY = "not assigned";
};

RESOURCE RES_SCHEDULER {
   STATE = "(osResOccupationCounter[6] != 0) ? 1 : 0";
   LOCKER  = "(osResOccupationCounter[6] != 0) ? osResActualTask[6] : 0xFFFE";
   PRIORITY = "SCHEDULER";
};

MESSAGECONTAINER msgPhoneBapRequest_OsHostTask_10ms {
   MSGNAME = "msgPhoneBapRequest";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[2].dataPtr.msg->BapRequest_obj";
   vs_State = "0";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgPhoneBookBapRequest_OsHostTask_10ms {
   MSGNAME = "msgPhoneBookBapRequest";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[6].dataPtr.msg->BapRequest_obj";
   vs_State = "0";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgMdiBapRequest_OsHostTask_10ms {
   MSGNAME = "msgMdiBapRequest";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[10].dataPtr.msg->BapRequest_obj";
   vs_State = "0";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgKpbBapRequest_OsHostTask_10ms {
   MSGNAME = "msgKpbBapRequest";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[16].dataPtr.msg->BapRequest_obj";
   vs_State = "0";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgAppDiagDiagnoseResponse_OsHostTask_10ms {
   MSGNAME = "msgAppDiagDiagnoseResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[10].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[10].pQRam->r->APP_DIAG_ST_DIAG_RESPONSE_obj";
   vs_State = "oskComQueue[10].pQRam->status";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgMuteBehavior_OsHostTask_10ms {
   MSGNAME = "msgMuteBehavior";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[21].dataPtr.msg->TelMuteBehaviorType_obj";
   vs_State = "0";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgHostTaskASRStatus_OsHostTask_10ms {
   MSGNAME = "msgHostTaskASRStatus";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[22].dataPtr.msg->VCRPerfMeasStatusMsgType_obj";
   vs_State = "0";
   vs_Sender = "1";
   vs_Receiver = "0";
};

MESSAGECONTAINER msgApp3ButMod_OsAppTask_event_5ms {
   MSGNAME = "msgApp3ButMod";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[0].dataPtr.msg->DRV3BM_ST_MESSAGE_obj";
   vs_State = "0";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgPhoneBapIndication_OsAppTask_event_5ms {
   MSGNAME = "msgPhoneBapIndication";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "5";
   QUEUECOUNT = "oskComQueue[0].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[0].pQRam->r->BapIndication_obj";
   vs_State = "oskComQueue[0].pQRam->status";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgErmATResponse_OsAppTask_event_5ms {
   MSGNAME = "msgErmATResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[1].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[1].pQRam->r->ATRspMessageType_obj";
   vs_State = "oskComQueue[1].pQRam->status";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgPhoneATResponse_OsAppTask_event_5ms {
   MSGNAME = "msgPhoneATResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[2].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[2].pQRam->r->ATRspMessageType_obj";
   vs_State = "oskComQueue[2].pQRam->status";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgPhoneBookBapIndication_OsAppTask_event_5ms {
   MSGNAME = "msgPhoneBookBapIndication";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "5";
   QUEUECOUNT = "oskComQueue[3].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[3].pQRam->r->BapIndication_obj";
   vs_State = "oskComQueue[3].pQRam->status";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgPhoneBookATResponse_OsAppTask_event_5ms {
   MSGNAME = "msgPhoneBookATResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[4].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[4].pQRam->r->ATRspMessageType_obj";
   vs_State = "oskComQueue[4].pQRam->status";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgMdiBapIndication_OsAppTask_event_5ms {
   MSGNAME = "msgMdiBapIndication";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "5";
   QUEUECOUNT = "oskComQueue[5].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[5].pQRam->r->BapRequest_obj";
   vs_State = "oskComQueue[5].pQRam->status";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgMdiATResponse_OsAppTask_event_5ms {
   MSGNAME = "msgMdiATResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[6].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[6].pQRam->r->ATRspMessageType_obj";
   vs_State = "oskComQueue[6].pQRam->status";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgSpeedLanguage_OsAppTask_event_5ms {
   MSGNAME = "msgSpeedLanguage";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[13].dataPtr.msg->APP_CAN_MsgStates_obj";
   vs_State = "0";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgVCRATResponse_OsAppTask_event_5ms {
   MSGNAME = "msgVCRATResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[7].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[7].pQRam->r->ATRspMessageType_obj";
   vs_State = "oskComQueue[7].pQRam->status";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgKpbBapIndication_OsAppTask_event_5ms {
   MSGNAME = "msgKpbBapIndication";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "5";
   QUEUECOUNT = "oskComQueue[8].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[8].pQRam->r->BapIndication_obj";
   vs_State = "oskComQueue[8].pQRam->status";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgSmsATResponse_OsAppTask_event_5ms {
   MSGNAME = "msgSmsATResponse";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "4";
   QUEUECOUNT = "oskComQueue[9].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[9].pQRam->r->ATRspMessageType_obj";
   vs_State = "oskComQueue[9].pQRam->status";
   vs_Sender = "3";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgAppDiagDiagnoseRequest_OsAppTask_event_5ms {
   MSGNAME = "msgAppDiagDiagnoseRequest";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[19].dataPtr.msg->APP_DIAG_ST_DIAG_REQUEST_obj";
   vs_State = "0";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgMFLCode_OsAppTask_event_5ms {
   MSGNAME = "msgMFLCode";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[20].dataPtr.msg->MflKeyCodeType_obj";
   vs_State = "0";
   vs_Sender = "0";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgAppTaskSystemStates_OsAppTask_event_5ms {
   MSGNAME = "msgAppTaskSystemStates";
   MSGTYPE = "QUEUDED";
   QUEUESIZE = "2";
   QUEUECOUNT = "oskComQueue[11].pQRam->msgCount";
   FIRSTELEMENT = "oskComQueue[11].pQRam->r->CSHDL_enSystemStates_obj";
   vs_State = "oskComQueue[11].pQRam->status";
   vs_Sender = "2";
   vs_Receiver = "1";
};

MESSAGECONTAINER msgPwrmgrState_OsSystemTask_event {
   MSGNAME = "msgPwrmgrState";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[11].dataPtr.msg->PWMGR_enVoltageStates_obj";
   vs_State = "0";
   vs_Sender = "4";
   vs_Receiver = "2";
};

MESSAGECONTAINER msgCANInfotainmentInfo_OsSystemTask_event {
   MSGNAME = "msgCANInfotainmentInfo";
   MSGTYPE = "UNQUEUDED";
   QUEUESIZE = "1";
   QUEUECOUNT = "1";
   FIRSTELEMENT = "oskMsgRom[12].dataPtr.msg->CanSignalMessageType_obj";
   vs_State = "0";
   vs_Sender = "0";
   vs_Receiver = "2";
};

vs_OS_Config TMS470R1 {
   vs_CC = "oskVersionVariant.ucSysVariant & 0x0003";
   vs_STATUS_LEVEL = "(oskVersionVariant.ucSysVariant & 0x0004) >>2";
   vs_SCHEDULE = "(oskVersionVariant.ucSysVariant & 0x0018) >>3";
   vs_OS_MAJ_VERSION = "oskVersionVariant.ucSysVersionMaj";
   vs_OS_MIN_VERSION = "oskVersionVariant.ucSysVersionMin";
   vs_GEN_MAJ_VERSION = "oskVersionVariant.ucGenVersionMaj";
   vs_GEN_MIN_VERSION = "oskVersionVariant.ucGenVersionMin";
};


/* END OF F:\MYDOCUMENTS\WORKSPACE\ECLIPSE\SYS_VW_UHV_NAR_TMS470\MOD\MOD_OSEK_DYN\CFG\UHV_NAR.ORT */

